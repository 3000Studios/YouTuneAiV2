{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "🚀 Deploy YouTuneAI Theme",
            "type": "shell",
            "command": "python",
            "args": ["ai_controller.py", "--deploy-all"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new",
                "showReuseMessage": true,
                "clear": false
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "🎤 Start Voice Controller",
            "type": "shell",
            "command": "python",
            "args": ["ai_controller.py"],
            "group": "test",
            "isBackground": true,
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "📦 Install Python Dependencies",
            "type": "shell",
            "command": "pip",
            "args": ["install", "-r", "requirements.txt"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": false
            },
            "problemMatcher": []
        },
        {
            "label": "🔧 Setup Environment",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-Command",
                "Write-Host '🚀 Setting up YouTuneAI Environment...' -ForegroundColor Cyan; if (!(Test-Path '.env')) { Copy-Item '.env.example' '.env'; Write-Host '✅ Created .env file - please configure your API keys' -ForegroundColor Green } else { Write-Host '✅ .env file already exists' -ForegroundColor Green }; Write-Host '📋 Next steps:' -ForegroundColor Yellow; Write-Host '1. Edit .env file with your API keys' -ForegroundColor White; Write-Host '2. Run: Install Python Dependencies' -ForegroundColor White; Write-Host '3. Run: Start Voice Controller' -ForegroundColor White"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true
            },
            "problemMatcher": []
        },
        {
            "label": "🧪 Test AI Connection",
            "type": "shell",
            "command": "python",
            "args": ["-c", "import openai; print('✅ OpenAI library imported successfully'); from ai_controller import YouTuneAIController; controller = YouTuneAIController(); print('✅ AI Controller initialized successfully')"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": false
            },
            "problemMatcher": []
        },
        {
            "label": "📂 Open WordPress Admin",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-Command",
                "Start-Process 'https://youtuneai.com/wp-admin'"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "silent",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": false
            },
            "problemMatcher": []
        },
        {
            "label": "🌐 Preview Site",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-Command",
                "Start-Process 'https://youtuneai.com'"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "silent",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": false
            },
            "problemMatcher": []
        },
        {
            "label": "🔄 Watch and Auto-Deploy",
            "type": "shell",
            "command": "python",
            "args": ["-c", "from watchdog.observers import Observer; from watchdog.events import FileSystemEventHandler; import time; import subprocess; class DeployHandler(FileSystemEventHandler): def on_modified(self, event): if event.src_path.endswith(('.php', '.css', '.js')): print(f'🔄 File changed: {event.src_path}'); subprocess.run(['python', 'ai_controller.py', '--deploy-file', event.src_path]); observer = Observer(); observer.schedule(DeployHandler(), 'wp-theme-youtuneai', recursive=True); observer.start(); print('👀 Watching for file changes...'); observer.join()"],
            "group": "build",
            "isBackground": true,
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new",
                "showReuseMessage": false,
                "clear": true
            },
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "📋 Show Command History",
            "type": "shell",
            "command": "python",
            "args": ["-c", "import json; import os; if os.path.exists('command_history.json'): data = json.load(open('command_history.json')); print('\\n📋 Recent AI Commands:\\n'); [print(f'🕐 {cmd[\"timestamp\"][:19]} - {cmd[\"command\"]} -> {cmd[\"result\"].get(\"execution_result\", {}).get(\"message\", \"Unknown\")}') for cmd in data[-10:]]; else: print('No command history found')"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": false
            },
            "problemMatcher": []
        },
        {
            "label": "🧹 Clean Build Files",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-Command",
                "Write-Host '🧹 Cleaning build files...' -ForegroundColor Yellow; Remove-Item -Path '__pycache__' -Recurse -Force -ErrorAction SilentlyContinue; Remove-Item -Path '*.pyc' -Force -ErrorAction SilentlyContinue; Remove-Item -Path '.pytest_cache' -Recurse -Force -ErrorAction SilentlyContinue; Write-Host '✅ Clean complete!' -ForegroundColor Green"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": false
            },
            "problemMatcher": []
        }
    ]
}
